def artifactname = "devops-snow-build-app.jar"
def repoName = "JenkinsDevOpsProject"
def pipelineName = "SunilPipelines/Sunil-Scripted-Pipeline-Sonar"
def semanticVersion = "${env.BUILD_NUMBER}.0.0"
def packageName = "devops-snow-build-pkg_${env.BUILD_NUMBER}"
def version = "${env.BUILD_NUMBER}.0"
def pkgName = "devops-snow-build-pkg_${env.BUILD_NUMBER}"

pipeline {
  agent any
  tools {
    maven 'Maven'
  }
  environment {
    SCANNER_HOME = tool 'sonarScanner'
  }  
  stages {
    stage('Build') {
      when {
        equals expected: 2, actual: 1
      }
      steps {
        echo 'Running sonar....'
        sh 'mvn -B -DskipTests clean compile'
        echo 'Running sonar in build step ....'
        sonarSummaries()
      }
    }
    stage('Test') {
      when {
        equals expected: 2, actual: 1
      }
      steps {
        echo 'Running tests....'
        sh 'mvn test'
      }
      post {
        always {
          junit "**/target/surefire-reports/*.xml"
        }
      }
    }
    stage('Deploy Stage') {
      steps {
        echo 'Deploying the change....'
        
        //snDevOpsArtifact(artifactsPayload: """{"artifacts": [{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}","semanticVersion": "1.${env.BUILD_NUMBER}.0","repositoryName": "${repoName}"}],"branchName":"master"}""")
        
        //snDevOpsPackage(name: "${pkgName}-${env.BUILD_NUMBER}", artifactsPayload: """{"artifacts":[{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}", "repositoryName": "${repoName}"}], "branchName":"master"}""")
        
        snDevOpsChange configurationName: 'ankur_instance'
      }
    }
  }
}

def sonarSummaries() {
	withSonarQubeEnv('sonarcloud_ankur'){
	   if(fileExists("sonar-project.properties")) {
			sh '${SCANNER_HOME}/bin/sonar-scanner'
		} else {
			sh 'mvn clean verify sonar:sonar \
			    -Dsonar.login=71c70683d55030fe9fe461afdf873d7b987008db \
			    -Dsonar.host.url=https://sonarcloud.io \
			    -Dsonar.organization=pyespresso \
			    -Dsonar.projectKey=pyespresso_Demo'
		}
	}
	//timeout(time: 1, unit: 'MINUTES') {
		//waitForQualityGate abortPipeline: false
	//}
}
